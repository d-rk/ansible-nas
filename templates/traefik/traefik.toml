################################################################
# Global configuration
################################################################

# Enable debug mode
#
# Optional
# Default: false
#
debug = {{ traefik_debug }}

# Log level
#
# Optional
# Default: "ERROR"
#
# logLevel = "DEBUG"

# Entrypoints to be used by frontends that do not specify any entrypoint.
# Each frontend can specify its own entrypoints.
#
# Optional
# Default: ["http"]
#
defaultEntryPoints = ["http", "https"]

################################################################
# Entrypoints configuration
################################################################

[entryPoints]
  [entryPoints.http]
  address = ":{{ traefik_port_http }}"
    [entryPoints.http.redirect]
    entryPoint = "https"

  [entryPoints.https]
  address = ":{{ traefik_port_https }}"
    [entryPoints.https.tls]

  [entryPoints.traefik]
  address = ":{{ traefik_port_ui }}"

################################################################
# Traefik logs configuration
################################################################

# Traefik logs
# Enabled by default and log to stdout
#
# Optional
#
# [traefikLog]

# Sets the filepath for the traefik log. If not specified, stdout will be used.
# Intermediate directories are created if necessary.
#
# Optional
# Default: os.Stdout
#
# filePath = "log/traefik.log"

# Format is either "json" or "common".
#
# Optional
# Default: "common"
#
# format = "common"

################################################################
# Access logs configuration
################################################################

# Enable access logs
# By default it will write to stdout and produce logs in the textual
# Common Log Format (CLF), extended with additional fields.
#
# Optional
#
# [accessLog]

# Sets the file path for the access log. If not specified, stdout will be used.
# Intermediate directories are created if necessary.
#
# Optional
# Default: os.Stdout
#
# filePath = "/path/to/log/log.txt"

# Format is either "json" or "common".
#
# Optional
# Default: "common"
#
# format = "common"

################################################################
# API and dashboard configuration
################################################################

# Enable API and dashboard
[api]

  # Name of the related entry point
  #
  # Optional
  # Default: "traefik"
  #
  entryPoint = "traefik"

  # Enabled Dashboard
  #
  # Optional
  # Default: true
  #
  dashboard = true

################################################################
# Ping configuration
################################################################

# Enable ping
[ping]

  # Name of the related entry point
  #
  # Optional
  # Default: "traefik"
  #
  # entryPoint = "traefik"

################################################################
# Docker configuration backend
################################################################

# Enable Docker configuration backend
[docker]

# Docker server endpoint. Can be a tcp or a unix socket endpoint.
#
# Required
# Default: "unix:///var/run/docker.sock"
#
# endpoint = "tcp://10.10.10.10:2375"

# Default domain used.
# Can be overridden by setting the "traefik.domain" label on a container.
#
# Optional
# Default: ""
#
# domain = "docker.localhost"

# Expose containers by default in traefik
#
# Optional
# Default: true
exposedByDefault = false


[acme]
email = "{{ ansible_nas_email }}"
storage = "acme.json"
entryPoint = "https"
{% if traefik_acme_staging == "true" %}
caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
{% endif %}
acmeLogging = true

  # [acme.dnsChallenge]
  # provider = "cloudflare"
  # delayBeforeCheck = 0

  # [acme.httpChallenge]
  # entryPoint = "http"

  [acme.tlsChallenge]

  [[acme.domains]]
  main = "{{ ansible_nas_hostname }}.{{ ansible_nas_domain }}"


  sans = [{% if airsonic_available_externally == "true" %}"{{ airsonic_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if bazarr_available_externally == "true" %}"{{ bazarr_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if bitwarden_available_externally == "true" %}"{{ bitwarden_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if calibre_available_externally == "true" %}"{{ calibre_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if cloudcmd_available_externally == "true" %}"{{ cloudcmd_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if couchpotato_available_externally == "true" %}"{{ couchpotato_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if duplicati_available_externally == "true" %}"{{ duplicati_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if emby_available_externally == "true" %}"{{ emby_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if firefly_available_externally == "true" %}"{{ firefly_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if gitea_available_externally == "true" %}"{{ gitea_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if gitlab_available_externally == "true" %}"{{ gitlab_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if glances_available_externally == "true" %}"{{ glances_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if grafana_available_externally == "true" %}"{{ grafana_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if guacamole_available_externally == "true" %}"{{ guacamole_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if heimdall_available_externally == "true" %}"{{ heimdall_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if homeassistant_available_externally == "true" %}"{{ homeassistant_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if jackett_available_externally == "true" %}"{{ jackett_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if jellyfin_available_externally == "true" %}"{{ jellyfin_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if joomla_available_externally == "true" %}"{{ joomla_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if krusader_available_externally == "true" %}"{{ krusader_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if lidarr_available_externally == "true" %}"{{ lidarr_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if mylar_available_externally == "true" %}"{{ mylar_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if miniflux_available_externally == "true" %}"{{ miniflux_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if netdata_available_externally == "true" %}"{{ netdata_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if nextcloud_available_externally == "true" %}"{{ nextcloud_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if nzbget_available_externally == "true" %}"{{ nzbget_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if ombi_available_externally == "true" %}"{{ ombi_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if openhab_available_externally == "true" %}"{{ openhab_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if organizr_available_externally == "true" %}"{{ organizr_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if plex_available_externally == "true" %}"{{ plex_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if portainer_available_externally == "true" %}"{{ portainer_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if pyload_available_externally == "true" %}"{{ pyload_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if pytivo_available_externally == "true" %}"{{ pytivo_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if radarr_available_externally == "true" %}"{{ radarr_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if serposcope_available_externally == "true" %}"{{ serposcope_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if sickchill_available_externally == "true" %}"{{ sickchill_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if sonarr_available_externally == "true" %}"{{ sonarr_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if tautulli_available_externally == "true" %}"{{ tautulli_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if thelounge_available_externally == "true" %}"{{ thelounge_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if transmission_available_externally == "true" %}"{{ transmission_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if transmission_with_openvpn_available_externally == "true" %}"{{ transmission_with_openvpn_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if ubooquity_available_externally == "true" %}"{{ ubooquity_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if utorrent_available_externally == "true" %}"{{ utorrent_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if wallabag_available_externally == "true" %}"{{ wallabag_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if youtubedlmaterial_available_externally == "true" %}"{{ youtubedlmaterial_subdomain }}.{{ ansible_nas_domain }}",{% endif %}
{% if znc_available_externally == "true" %}"{{ znc_subdomain }}.{{ ansible_nas_domain }}",{% endif %}]
